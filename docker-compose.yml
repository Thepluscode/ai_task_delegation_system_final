version: '3.8'

services:
  # Frontend - Next.js Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8001
    depends_on:
      - task-delegation-service
      - robot-control-service
      - workflow-engine
      - analytics-service
      - learning-service
    networks:
      - automation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Task Delegation Service
  task-delegation-service:
    build:
      context: ./services/task-delegation-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://automation_user:automation_pass@postgres:5432/automation_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key
      - LOG_LEVEL=info
    depends_on:
      - postgres
      - redis
    networks:
      - automation-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Robot Control Service
  robot-control-service:
    build:
      context: ./services/robot-control-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://automation_user:automation_pass@postgres:5432/automation_db
      - REDIS_URL=redis://redis:6379
      - ROBOT_NETWORK_INTERFACE=eth0
    depends_on:
      - postgres
      - redis
    networks:
      - automation-network
    restart: unless-stopped
    privileged: true  # Required for robot hardware access

  # Workflow Engine
  workflow-engine:
    build:
      context: ./services/workflow-engine
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://automation_user:automation_pass@postgres:5432/automation_db
      - REDIS_URL=redis://redis:6379
      - TASK_DELEGATION_URL=http://task-delegation-service:8000
      - ROBOT_CONTROL_URL=http://robot-control-service:8001
    depends_on:
      - postgres
      - redis
      - task-delegation-service
      - robot-control-service
    networks:
      - automation-network
    restart: unless-stopped

  # Analytics Service
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://automation_user:automation_pass@postgres:5432/automation_db
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - INFLUXDB_URL=http://influxdb:8086
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - influxdb
    networks:
      - automation-network
    restart: unless-stopped

  # Learning Service
  learning-service:
    build:
      context: ./services/learning-service
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=postgresql://automation_user:automation_pass@postgres:5432/automation_db
      - REDIS_URL=redis://redis:6379
      - ML_MODEL_PATH=/app/models
      - TENSORFLOW_SERVING_URL=http://tensorflow-serving:8501
    depends_on:
      - postgres
      - redis
      - tensorflow-serving
    networks:
      - automation-network
    restart: unless-stopped
    volumes:
      - ./models:/app/models

  # Database - PostgreSQL
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=automation_db
      - POSTGRES_USER=automation_user
      - POSTGRES_PASSWORD=automation_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - automation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U automation_user -d automation_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache - Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass automation_redis_pass
    volumes:
      - redis_data:/data
    networks:
      - automation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Search Engine - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - automation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Time Series Database - InfluxDB
  influxdb:
    image: influxdb:2.7-alpine
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=automation_user
      - DOCKER_INFLUXDB_INIT_PASSWORD=automation_pass
      - DOCKER_INFLUXDB_INIT_ORG=automation_org
      - DOCKER_INFLUXDB_INIT_BUCKET=automation_bucket
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=automation_admin_token
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - automation-network
    restart: unless-stopped

  # ML Model Serving - TensorFlow Serving
  tensorflow-serving:
    image: tensorflow/serving:2.14.0
    ports:
      - "8501:8501"
      - "8500:8500"
    environment:
      - MODEL_NAME=automation_model
    volumes:
      - ./models:/models
    command: --model_config_file=/models/models.config --model_config_file_poll_wait_seconds=60
    networks:
      - automation-network
    restart: unless-stopped

  # Message Queue - RabbitMQ
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=automation_user
      - RABBITMQ_DEFAULT_PASS=automation_pass
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - automation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - automation-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=automation_grafana_pass
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - automation-network
    restart: unless-stopped

  # Load Balancer - Nginx
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
    networks:
      - automation-network
    restart: unless-stopped

networks:
  automation-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  influxdb_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
